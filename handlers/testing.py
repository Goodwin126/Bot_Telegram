from aiogram import types, Dispatcher
from aiogram.dispatcher.storage import FSMContext
from keyboards.default.markups import meinMenu, genderMenu, weightMenu, heightMenu, ageMenu, ActiveMenu, ActiveMenu2
from loader import dp
from states import Test


@dp.message_handler(text="–ë–ñ–£")  # –ø–æ –∫–æ–º–∞–Ω–¥–µ test –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ—Ä–æ—Å
async def enter_test(message: types.Message):
    await message.answer("–ë–ñ–£", reply_markup=meinMenu)



@dp.message_handler(text="–ö–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—åüìà")  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await state.update_data(answer1=answer)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –º–∞—à–∏–Ω—É –æ—Å—Ç–æ—è–Ω–∏—è
    first_name = message.from_user.first_name
    await message.answer(f'{first_name}, –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—á–∏—Ç–∞–µ–º \n –≤–∞—à—É —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–ª—Ä–∏–π'.format(message.from_user))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=genderMenu)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Ç–æ—Ä—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    await Test.Q1.set()  # –≤–≤–æ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å

@dp.message_handler(text='–ù–∞–∑–∞–¥', state=Test.Q1)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q1_2(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.delete()
        await message.answer("‚¨Ö –ù–∞–∑–∞–¥", reply_markup=meinMenu)
        await state.finish()


@dp.message_handler(text='–ú—É–∂—á–∏–Ω–∞', state=Test.Q1)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q2(message: types.Message, state: FSMContext):
    answer2 = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    if message.text == '–ú—É–∂—á–∏–Ω–∞':
        x = 88.36
        await state.update_data(x=x)  # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ö
        await state.update_data(answer2=answer2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –≤ –º–∞—à–∏–Ω—É –æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–µ—Å(–∫–≥)",
                             reply_markup=weightMenu)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Ç—Ä–µ—Ç—å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º
        await Test.Q2.set()  # –≤–≤–æ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å


@dp.message_handler(text='–ñ–µ–Ω—â–∏–Ω–∞', state=Test.Q1)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q3(message: types.Message, state: FSMContext):
    answer2 = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    if message.text == "–ñ–µ–Ω—â–∏–Ω–∞":
        x = 447.6
        await state.update_data(x=x)  # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ö
        await state.update_data(answer2=answer2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å –≤ –º–∞—à–∏–Ω—É –æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–µ—Å(–∫–≥)",
                             reply_markup=weightMenu)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Ç—Ä–µ—Ç—å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º
        await Test.Q2.set()  # –≤–≤–æ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å

@dp.message_handler(text='–ù–∞–∑–∞–¥', state=Test.Q2)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q3_2(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª", reply_markup=genderMenu)
        await Test.Q1.set()



@dp.message_handler(state=Test.Q2)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q4(message: types.Message, state: FSMContext):
    message.text = str(message.text)
    if message.text.isnumeric():
        y = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(y=y)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å –≤ –º–∞—à–∏–Ω—É –æ—Å—Ç–æ—è–Ω–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à —Ä–æ—Å—Ç(—Å–º)",
                             reply_markup=heightMenu)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        await Test.Q3.set()  # –≤–≤–æ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=weightMenu)


@dp.message_handler(text='–ù–∞–∑–∞–¥', state=Test.Q3)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q4_2(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–µ—Å(–∫–≥)", reply_markup=weightMenu)
        await Test.Q2.set()


@dp.message_handler(state=Test.Q3)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q5(message: types.Message, state: FSMContext):
    message.text = str(message.text)
    if message.text.isnumeric():
        z = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(z=z)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å –≤ –º–∞—à–∏–Ω—É –æ—Å—Ç–æ—è–Ω–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç(–ª–µ—Ç)",
                             reply_markup=ageMenu)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        await Test.Q4.set()  # –≤–≤–æ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=heightMenu)

@dp.message_handler(text='–ù–∞–∑–∞–¥', state=Test.Q4)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q5_2(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à —Ä–æ—Å—Ç(—Å–º)", reply_markup=heightMenu)
        await Test.Q3.set()




@dp.message_handler(state=Test.Q4)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q6(message: types.Message, state: FSMContext):
    message.text = str(message.text)
    if message.text.isnumeric():
        age = message.text  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(age=age)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å –≤ –º–∞—à–∏–Ω—É –æ—Å—Ç–æ—è–Ω–∏
        await message.answer("–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å? –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç",
                             reply_markup=ActiveMenu)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ—Ç–≤–µ—Ä—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        await Test.Q5.set()  # –≤–≤–æ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=ageMenu)

@dp.message_handler(text='–ù–∞–∑–∞–¥', state=Test.Q5)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q6_2(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç(–ª–µ—Ç)", reply_markup=ageMenu)
        await Test.Q5.set()

@dp.message_handler(text='‚¨Ö–≤ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', state=Test.Q5)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q1_2(message: types.Message, state: FSMContext):
    if message.text == "‚¨Ö–≤ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é":
        await message.answer("‚¨Ö–≤ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", reply_markup=meinMenu)
        await Test.Q1.set()


@dp.message_handler(state=Test.Q5)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q7(message: types.Message, state: FSMContext):
    if message.text == '–Ω–µ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å':
        c1 = 1.2  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(c1=c1)
        await Test.Q6.set()
    elif message.text == '1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é':
        c1 = 1.375  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(c1=c1)
        await Test.Q6.set()
    elif message.text == '4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é':
        c1 = 1.55  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(c1=c1)
        await Test.Q6.set()
    elif message.text == '6-7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é':
        c1 = 1.725  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(c1=c1)
        await Test.Q6.set()
    elif message.text == '1-2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å':
        c1 = 1.9  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await state.update_data(c1=c1)
        await Test.Q6.set()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=ActiveMenu)
    first_name = message.from_user.first_name
    data = await state.get_data()
    x = data.get("x")
    y = float(data.get("y"))
    z = float(data.get("z"))
    age = float(data.get("age"))
    c1 = float(data.get("c1"))
    if x == 88.36:
        x = (x + (13.4 * y) + (4.8 * z) - (5.7 * age))
        x = round(x * c1,2)
        await state.update_data(x=x)
        belok = round(x / 100 * 30, 1)
        gyr = round(x / 100 * 20, 1)
        ygl = round(x / 100 * 50, 1)
        await message.answer(f'{first_name}' + ", <b>–≤–∞—à–∞ —Å—É—Ç–æ—á–Ω–æ—è –Ω–æ—Ä–º–∞ \n–∫–∞–ª–æ—Ä–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: </b>" + str(x) +
                             " –∫–∫–∞–ª.\n" "–±–µ–ª–∫–∞: " + str(belok) + " –∫–∫–∞–ª.\n" + "–∂–∏—Ä–æ–≤: " + str(gyr) + " –∫–∫–∞–ª.\n"
                             "—É–≥–ª–µ–≤–æ–¥–æ–≤: " + str(ygl) + " –∫–∫–∞–ª.",
                               parse_mode='HTML', reply_markup=ActiveMenu2)
    if x == 447.6:
        x = (x + (9.2 * y) + (3.1 * z) - (4.3 * age))
        x = round(x * c1, 2)
        await state.update_data(x=x)
        belok = round(x / 100 * 30, 1)
        gyr = round(x / 100 * 20, 1)
        ygl = round(x / 100 * 50, 1)
        await message.answer(f'{first_name}' + ", <b>–≤–∞—à–∞ —Å—É—Ç–æ—á–Ω–æ—è –Ω–æ—Ä–º–∞ \n–∫–∞–ª–æ—Ä–∏–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: </b>" + str(x) +
                             " –∫–∫–∞–ª.\n" "–±–µ–ª–∫–∞: " + str(belok) + " –∫–∫–∞–ª.\n" + "–∂–∏—Ä–æ–≤: " + str(gyr) + " –∫–∫–∞–ª.\n"
                             "—É–≥–ª–µ–≤–æ–¥–æ–≤: " + str(ygl) + " –∫–∫–∞–ª.",
                               parse_mode='HTML', reply_markup=ActiveMenu2)

@dp.message_handler(text='‚¨Ö–≤ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', state=Test.Q6)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q1_2(message: types.Message, state: FSMContext):
    if message.text == "‚¨Ö–≤ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é":
        await message.answer("‚¨Ö–≤ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", reply_markup=meinMenu)
        await Test.Q1.set()


@dp.message_handler(state=Test.Q6)  # —Ñ–∏–ª—å—Ç—Ä –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
async def answer_q8(message: types.Message, state: FSMContext):
    if message.text == '–Ω–∞–±—Ä–∞—Ç—å üí™üèª':
        message.text = str(message.text)
        first_name = message.from_user.first_name
        data = await state.get_data()
        x = data.get("x")
        a = round(x / 100 * 110, 1)
        b = round(x / 100 * 120, 1)
        belok = round(a / 100 * 30, 1)
        gyr = round(a / 100 * 25, 1)
        ygl = round(a / 100 * 45, 1)
        belok2 = round(b / 100 * 30, 1)
        gyr2 = round(b / 100 * 25, 1)
        ygl2 = round(b / 100 * 45, 1)
        await message.answer(f'{first_name}' +", <b>—á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏,\n–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å:</b> –æ—Ç " + str(a) + " –¥–æ " + str(b) +
                               " –∫–∫–∞–ª.\n""–±–µ–ª–∫–∞: –æ—Ç " + str(belok) + " –¥–æ " + str(belok2) + " –∫–∫–∞–ª.\n""–∂–∏—Ä–æ–≤ : –æ—Ç " + str(
                                   gyr) + " –¥–æ " + str(gyr2) + " –∫–∫–∞–ª.\n""—É–≥–ª–µ–≤–æ–¥–æ–≤: –æ—Ç " + str(ygl) + " –¥–æ " + str(ygl2) + " –∫–∫–∞–ª.",
                               parse_mode='HTML', reply_markup=ActiveMenu2)

    if message.text == '–ø–æ—Ö—É–¥–µ—Ç—å ü•ë':
        message.text = str(message.text)
        first_name = message.from_user.first_name
        data = await state.get_data()
        x = data.get("x")
        a = round(x / 100 * 90, 1)
        b = round(x / 100 * 80, 1)
        belok = round(a / 100 * 40, 1)
        gyr = round(a / 100 * 35, 1)
        ygl = round(a / 100 * 25, 1)
        belok2 = round(b / 100 * 40, 1)
        gyr2 = round(b / 100 * 35, 1)
        ygl2 = round(b / 100 * 25, 1)
        await message.answer(f'{first_name}' +", <b>—á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏,\n–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä–µ–±–ª—è—Ç—å:</b> –æ—Ç " + str(b) + " –¥–æ " + str(a) +
                               " –∫–∫–∞–ª.\n""–±–µ–ª–∫–∞: –æ—Ç " + str(belok2) + " –¥–æ " + str(belok) + " –∫–∫–∞–ª.\n""–∂–∏—Ä–æ–≤ : –æ—Ç " + str(
                                   gyr2) + " –¥–æ " + str(gyr) + " –∫–∫–∞–ª.\n""—É–≥–ª–µ–≤–æ–¥–æ–≤: –æ—Ç " + str(ygl2) + " –¥–æ " + str(ygl) + " –∫–∫–∞–ª.",
                               parse_mode='HTML', reply_markup=ActiveMenu2)



def register_handlers_testing(dp: Dispatcher):
    dp.register_message_handler(enter_test,text="–ë–ñ–£")
    dp.register_message_handler(answer_q1, text="–ö–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å")
    dp.register_message_handler(answer_q2, text='–ú—É–∂—á–∏–Ω–∞', state=Test.Q1)
    dp.register_message_handler(answer_q3, text='–ñ–µ–Ω—â–∏–Ω–∞', state=Test.Q1)
    dp.register_message_handler(answer_q4, state=Test.Q2)
    dp.register_message_handler(answer_q5, state=Test.Q3)
    dp.register_message_handler(answer_q6, state=Test.Q4)
    dp.register_message_handler(answer_q7, state=Test.Q5)
    dp.register_message_handler(answer_q8, state=Test.Q6)
