from aiogram.dispatcher import FSMContext
from loader import dp, bot
from aiogram import types
from states import Score
from keyboards.default.markups import meinMenu
from keyboards import score_bgu_kb
from data_base import sqlite_db_score
import string
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text


@dp.message_handler(text='–ü–†–ò–Å–ú –ü–ò–©–òüç¥(–ö–ë–ñ–£)')
async def start_score(message: types.Message):
    first_name = message.from_user.first_name
    await Score.V1.set()  # –≤–≤–æ–¥–∏–º –≤ —Å–æ—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.answer(f'{first_name}, –¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—á–∏—Ç–∞–µ–º –ë–ñ–£ –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞,'
                         f' –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ '
                         f'–∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞'.format(message.from_user),reply_markup=score_bgu_kb.meinMenuBGU)

#–°–ß–ò–¢–ê–ï–ú –ö–ê–õ–û–†–ò–ò, –ü–û–î–í–û–î–ò–ú –ò–¢–û–ì
@dp.message_handler(state="*", commands='–ø–æ—Å—á–∏—Ç–∞—Ç—å')
@dp.message_handler(Text(equals='–ø–æ—Å—á–∏—Ç–∞—Ç—å', ignore_case=True), state="*")
async def score_finich_handler(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()
        data = await state.get_data()
        A1 = float(data.get("result1")) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ —Å—á–∏—Ç–∞–µ–º
        A2 = float(data.get("result2")) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ —Å—á–∏—Ç–∞–µ–º
        A3 = float(data.get("result3")) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ —Å—á–∏—Ç–∞–µ–º
        A4 = float(data.get("result4")) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ —Å—á–∏—Ç–∞–µ–º
        A1 = round(A1, 2) #–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        A2 = round(A2, 2) #–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        A3 = round(A3, 2) #–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        A4 = round(A4, 2) #–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        await bot.send_message(message.from_user.id, f'<b>–ë–ª—é–¥–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑: </b>'
        f''+str(A1)+' –≥. –±–µ–ª–∫–∞, '+str(A2)+' –≥. –∂–∏—Ä–æ–≤, '+str(A3)+' –≥. —É–≥–ª–µ–≤–æ–¥–æ–≤. \n<b>–ò—Ç–æ–≥–æ :</b>'+str(A4)+' –∫–∫–∞–ª.',parse_mode='HTML',reply_markup=meinMenu)
        if current_state is None:
            return
        await state.finish()
    except:
        pass
@dp.message_handler(state="*", commands='‚¨Ö –ù–∞–∑–∞–¥')
@dp.message_handler(Text(equals='‚¨Ö –ù–∞–∑–∞–¥', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.delete()
    await message.answer("‚¨Ö –ù–∞–∑–∞–¥",reply_markup=meinMenu)


#–ò–©–ï–ú –ü–ï–†–í–´–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V1)
async def score_1(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().startswith(message.text.lower().translate(str.maketrans("","",string.punctuation))):
                    #if message.text.lower().translate(str.maketrans("","",string.punctuation)) in i.lower():
                        await bot.send_message(message.from_user.id,f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass

#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V1)
async def del_callback_run1(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V2.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V2)
async def score_2(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = (float(data.get("A1"))) / 100 * gramm #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ —Å—á–∏—Ç–∞–µ–º
        A2 = (float(data.get("A2"))) / 100 * gramm #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ —Å—á–∏—Ç–∞–µ–º
        A3 = (float(data.get("A3"))) / 100 * gramm #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ —Å—á–∏—Ç–∞–µ–º
        A4 = (float(data.get("A4"))) / 100 * gramm #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V3.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")


#–ò–©–ï–ú –í–¢–û–†–û–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V3)
async def score_3(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                             f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V3)
async def del_callback_run2(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V4.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V4)
async def score_4(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V5.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –¢–†–ï–¢–ò–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V5)
async def score_5(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                            f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V5)
async def del_callback_run3(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V6.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V6)
async def score_6(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V7.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –ß–ï–¢–í–ï–†–¢–´–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V7)
async def score_7(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                            f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V7)
async def del_callback_run4(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V8.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V8)
async def score_8(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V9.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—è—Ç–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –ü–Ø–¢–´–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V9)
async def score_9(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                               f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V9)
async def del_callback_run5(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V10.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V10)
async def score_10(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V11.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–µ—Å—Ç–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –®–ï–¢–°–¢–û–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V11)
async def score_11(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                             f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V11)
async def del_callback_run6(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V12.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V12)
async def score_12(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V13.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–¥—å–º–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –°–ï–î–¨–ú–û–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V13)
async def score_13(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                            f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V13)
async def del_callback_run7(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V14.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V14)
async def score_14(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V15.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Å—å–º–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –í–û–°–¨–ú–û–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V15)
async def score_15(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                             f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V15)
async def del_callback_run8(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V16.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V16)
async def score_16(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V17.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–≤—è—Ç–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –î–ï–í–Ø–¢–´–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V17)
async def score_17(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                            f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                               add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V17)
async def del_callback_run9(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V18.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V18)
async def score_18(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        await state.update_data(result1=A1)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result2=A2)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result3=A3)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.update_data(result4=A4)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await Score.V19.set()
        await bot.send_message(message.from_user.id,'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Å—è—Ç–æ–≥–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞')
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

#–ò–©–ï–ú –î–ï–°–Ø–¢–´–ô –ò–ù–ì–†–ò–î–ò–ï–ù–¢
@dp.message_handler(state=Score.V19)
async def score_19(message: types.Message):
    try:
        if not message.text.isnumeric(): #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ
            read = await sqlite_db_score.sql_read2() #–≤—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
            for ret in read: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º–∏
                for i in ret: #–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–Ω—É—Ç—Ä–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤
                    if i.lower().translate(str.maketrans("", "", string.punctuation)).find(message.text.lower()) != -1:
                        await bot.send_message(message.from_user.id,
                                            f'<b>{ret[0]} </b>, —Å–æ—Å—Ç–∞–≤: {ret[1]} –≥., –±–µ–ª–∫–∞, {ret[2]} –≥., –∂–∏—Ä–æ–≤, {ret[3]} –≥., —É–≥–ª–µ–≤–æ–¥–æ–≤, {ret[4]}  –∫–∫–∞–ª.'
                                                f'',parse_mode='HTML',reply_markup=InlineKeyboardMarkup().\
                                        add(InlineKeyboardButton(f'–î–æ–±–∞–≤–∏—Ç—å "{ret[0]}"',callback_data=ret[0])))
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑")
    except:
        pass
#–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.callback_query_handler(state=Score.V19)
async def del_callback_run10(callback_query: types.CallbackQuery, state: FSMContext):
    read = await sqlite_db_score.sql_read2()
    for ret in read:
        for i in ret:
            if i == callback_query.data:
                await state.update_data(A1=ret[1])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A2=ret[2])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A3=ret[3])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.update_data(A4=ret[4])#—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await Score.V20.set()
                await callback_query.answer(text=f'"{callback_query.data}" –¥–æ–±–∞–≤–ª–µ–Ω–æ,\n—Å–∫–æ–ª—å–∫–æ –≤ –≥—Ä–∞–º–º–∞—Ö?', show_alert=True)
#–≤–≤–æ–¥–∏–º –≥—Ä–∞–º–∞–∂, —Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–º–∞–∂ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=Score.V20)
async def score_20(message: types.Message, state: FSMContext):
    if message.text.isnumeric():
        gramm = float(message.text)
        data = await state.get_data()
        A1 = ((float(data.get("A1"))) / 100 * gramm) + (float(data.get("result1"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A1 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A2 = ((float(data.get("A2"))) / 100 * gramm) + (float(data.get("result2"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A2 –∏ result2, —Å—á–∏—Ç–∞–µ–º
        A3 = ((float(data.get("A3"))) / 100 * gramm) + (float(data.get("result3"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A3 –∏ result3, —Å—á–∏—Ç–∞–µ–º
        A4 = ((float(data.get("A4"))) / 100 * gramm) + (float(data.get("result4"))) #–≤—ã–≥—Ä—É–∂–∞–µ–º A4 –∏ result4, —Å—á–∏—Ç–∞–µ–º
        A1 = round(A1, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        A2 = round(A2, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        A3 = round(A3, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        A4 = round(A4, 2)  # –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        await bot.send_message(message.from_user.id, f'<b>–ë–ª—é–¥–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑: </b>'
                                                     f'' + str(A1) + ' –≥. –±–µ–ª–∫–∞, ' + str(A2) + ' –≥. –∂–∏—Ä–æ–≤, ' + str(
            A3) + ' –≥. —É–≥–ª–µ–≤–æ–¥–æ–≤. \n<b>–ò—Ç–æ–≥–æ:</b>' + str(A4) + ' –∫–∫–∞–ª.', parse_mode='HTML',reply_markup=meinMenu)
        await state.finish()
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É—Ç–µ –µ—â—ë —Ä–∞–∑, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö?")

